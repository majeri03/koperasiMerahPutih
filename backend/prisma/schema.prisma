// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// MODEL UNTUK SKEMA PUBLIC (MANAJEMEN TENANT)
// =============================================
enum TenantStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

model Tenant {
  id          String   @id @default(uuid())
  name        String
  subdomain   String   @unique
  schemaName  String   @unique @map("schema_name")
  status      TenantStatus @default(PENDING)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  registration TenantRegistration?
  @@map("tenants")
}

// =============================================
// MODEL UNTUK SKEMA TENANT (USERS, ROLES, ETC.)
// =============================================
model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
  @@map("roles")
}

model User {
  id            String   @id @default(uuid())
  fullName      String   @map("full_name")
  email         String   @unique
  passwordHash  String   @map("password_hash")
  hashedRefreshToken String?   @map("hashed_refresh_token")
  status        String   @default("active") // 'pending', 'active', 'rejected'
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int  @map("role_id")

  @@map("users")
}

// ===============================================
// MODEL TENANT REGISTRATION
// ===============================================

enum Gender {
  MALE
  FEMALE
}

model TenantRegistration {
  id                 String  @id @default(uuid())

  nik                String  @unique
  fullName           String  @map("full_name")
  gender             Gender
  email              String  @unique
  phoneNumber        String  @unique @map("phone_number")
  hashedPassword     String  @map("hashed_password")

  province           String
  city               String
  district           String
  village            String
  cooperativeName    String  @map("cooperative_name")
  
  ktpDocumentUrl     String? @map("ktp_document_url")
  skDocumentUrl      String? @map("sk_document_url")
  npwpDocumentUrl    String? @map("npwp_document_url")

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String @unique @map("tenant_id")

  @@map("tenant_registrations")
}

// Daftar anggota (Modul 1)
model Member {
  id              String    @id @default(uuid())
  memberNumber    String    @unique @map("member_number")

  // Data Diri
  fullName        String    @map("full_name")
  placeOfBirth    String    @map("place_of_birth")
  dateOfBirth     DateTime  @map("date_of_birth")
  gender          Gender    // Kita gunakan lagi Enum Gender yang sudah ada
  occupation      String    // Pekerjaan
  address         String

  // Keanggotaan
  joinDate        DateTime  @default(now()) @map("join_date")
  status          String    @default("ACTIVE") // Misal: ACTIVE, RESIGNED, EXPELLED
  
  // Berkas (akan menyimpan URL dari cloud storage)
  fingerprintUrl  String?   @map("fingerprint_url") // Cap Ibu Jari
  signatureUrl    String?   @map("signature_url")   // Tanda Tangan

  // Informasi Berhenti (opsional)
  resignationRequestDate DateTime? @map("resignation_request_date")
  terminationDate        DateTime? @map("termination_date")
  terminationReason    String?   @map("termination_reason")

  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  boardPositions  BoardPosition[]
  @@map("members")
}

// Daftar Pengurus (Modul 2)
model BoardPosition {
  id              String    @id @default(uuid())
  jabatan         String    // e.g., Ketua, Sekretaris, Bendahara
  tanggalDiangkat DateTime  @map("tanggal_diangkat")
  tanggalBerhenti DateTime? @map("tanggal_berhenti") // Opsional, null jika masih aktif
  alasanBerhenti  String?   @map("alasan_berhenti")  // Opsional

  // Relasi ke Anggota (Member)
  member   Member @relation(fields: [memberId], references: [id])
  memberId String @map("member_id")

  // Opsional: Jika ingin menyimpan URL scan/foto seperti di Member
  fingerprintUrl  String? @map("fingerprint_url")
  signatureUrl    String? @map("signature_url")

  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("board_positions") // Nama tabel di database
}