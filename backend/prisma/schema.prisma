// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// MODEL UNTUK SKEMA PUBLIC (MANAJEMEN TENANT)
// =============================================
enum TenantStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

model Tenant {
  id           String              @id @default(uuid())
  name         String
  subdomain    String              @unique
  schemaName   String              @unique @map("schema_name")
  status       TenantStatus        @default(PENDING)
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")
  registration TenantRegistration?

  @@map("tenants")
}

model SuperAdmin {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String    @map("password_hash")
  hashedRefreshToken String? @map("hashed_refresh_token")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("super_admins")
}

model PlatformSetting {
  key       String   @id 
  value     String? 
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("platform_settings")
}

// =============================================
// MODEL UNTUK SKEMA TENANT (USERS, ROLES, ETC.)
// =============================================
model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]

  @@map("roles")
  
}

model User {
  id                 String   @id @default(uuid())
  fullName           String   @map("full_name")
  email              String   @unique
  passwordHash       String   @map("password_hash")
  hashedRefreshToken String?  @map("hashed_refresh_token")
  status             String   @default("active") // 'pending', 'active', 'rejected'
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  role                     Role                @relation(fields: [roleId], references: [id]) 
  roleId                   Int                 @map("role_id")
  transaksiSimpananDicatat SimpananTransaksi[] 
  
  employeePengurusApprovals Employee[] @relation("EmployeePengurusApprovals") 
  employeeKetuaApprovals    Employee[] @relation("EmployeeKetuaApprovals")
  registrationsProcessed MemberRegistration[]
  memberSuggestionResponses MemberSuggestion[]
  supervisorySuggestionResponses SupervisorySuggestion[] @relation("SupervisorResponses")
  officialRecommendationResponses OfficialRecommendation[] @relation("OfficialRecommendationResponses")
  importantEventsRecorded         ImportantEvent[] @relation("ImportantEventsRecorded")
  passwordResetTokens PasswordResetToken[]
  articles Article[]
  @@map("users")
}

// Reset Password
model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique // Token unik yang dikirim ke email
  userId    String   @map("user_id") // ID User pemilik token
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Relasi ke User
  expiresAt DateTime @map("expires_at") // Waktu token kedaluwarsa
  createdAt DateTime @default(now()) @map("created_at")

  @@map("password_reset_tokens")
}

// ===============================================
// MODEL TENANT REGISTRATION
// ===============================================

enum Gender {
  MALE
  FEMALE
}

model TenantRegistration {
  id String @id @default(uuid())

  // === Informasi Koperasi ===
  cooperativeName String    @map("cooperative_name")
  skAhuKoperasi   String?   @map("sk_ahu_koperasi") // BARU
  province        String
  city            String
  district        String
  village         String
  alamatLengkap   String    @map("alamat_lengkap") @db.Text // BARU
  petaLokasi      String?   @map("peta_lokasi") // BARU

  // === Informasi PIC (Person in Charge) ===
  // Ini adalah data yang akan dipakai untuk membuat Member pertama
  picFullName     String    @map("pic_full_name") // Ganti dari fullName
  picNik          String    @unique @map("pic_nik") // Ganti dari nik
  picGender       Gender    @map("pic_gender") // Ganti dari gender
  picPlaceOfBirth String    @map("pic_place_of_birth") // BARU
  picDateOfBirth  DateTime  @map("pic_date_of_birth") // BARU
  picOccupation   String    @map("pic_occupation") // BARU
  picAddress      String    @map("pic_address") @db.Text // BARU
  picPhoneNumber  String    @unique @map("pic_phone_number") // Ganti dari phoneNumber
  email           String    @unique // Email Koperasi (untuk login)
  hashedPassword  String    @map("hashed_password")
  
  // === Dokumen Koperasi (URL) ===
  dokPengesahanPendirian String? @map("dok_pengesahan_pendirian") // BARU
  dokDaftarUmum          String? @map("dok_daftar_umum") // BARU
  dokAkteNotaris         String? @map("dok_akte_notaris") // BARU
  dokNpwpKoperasi        String? @map("dok_npwp_koperasi") // Ganti dari npwpDocumentUrl
  
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String @unique @map("tenant_id")

  @@map("tenant_registrations")
}

// =================================
//    REGISTRATION MEMBER
// =================================
enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

model MemberRegistration {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Data dari form pendaftaran
  nik            String             @unique // Unik per tenant
  fullName       String             @map("full_name")
  gender         Gender             // Gunakan enum Gender yang sudah ada
  email          String             @unique // Unik per tenant
  phoneNumber    String             @map("phone_number")
  hashedPassword String             @map("hashed_password") 
  placeOfBirth   String             @map("place_of_birth") 
  dateOfBirth    DateTime           @map("date_of_birth")  
  occupation     String                                 
  address        String

  // (Opsional) Dokumen pendukung
  // ktpScanUrl     String?            @map("ktp_scan_url")
  // photoUrl       String?            @map("photo_url")

  // Status Pendaftaran
  status RegistrationStatus @default(PENDING)

  // (Opsional) Siapa yang approve/reject dan kapan
  processedBy   User?   @relation(fields: [processedById], references: [id])
  processedById String? @map("processed_by_id")
  processedAt   DateTime? @map("processed_at")
  rejectionReason String? @map("rejection_reason") // Alasan jika ditolak

  @@map("member_registrations")
}

// Daftar anggota (Modul 1)
model Member {
  id           String @id @default(uuid())
  memberNumber String @unique @map("member_number")

  // Data Diri
  fullName     String   @map("full_name")
  nik          String   @unique
  placeOfBirth String   @map("place_of_birth")
  dateOfBirth  DateTime @map("date_of_birth")
  phoneNumber  String?  @map("phone_number")
  gender       Gender // Kita gunakan lagi Enum Gender yang sudah ada
  occupation   String // Pekerjaan
  address      String

  // Keanggotaan
  joinDate DateTime @default(now()) @map("join_date")
  status   String   @default("ACTIVE") // Misal: ACTIVE, RESIGNED, EXPELLED

  // Berkas (akan menyimpan URL dari cloud storage)
  fingerprintUrl String? @map("fingerprint_url") // Cap Ibu Jari
  signatureUrl   String? @map("signature_url") // Tanda Tangan

  // Informasi Berhenti (opsional)
  resignationRequestDate DateTime? @map("resignation_request_date")
  terminationDate        DateTime? @map("termination_date")
  terminationReason      String?   @map("termination_reason")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  boardPositions       BoardPosition[] 
  supervisoryPositions SupervisoryPosition[] 
  simpananTransaksi    SimpananTransaksi[] 
  simpananSaldo        SimpananSaldo? 
  loans                Loan[]
  memberSuggestions MemberSuggestion[]
  supervisorySuggestions SupervisorySuggestion[] @relation("SupervisorSuggestions")
  @@map("members")
}
enum JabatanPengurus {
  Ketua
  Sekretaris
  Bendahara
}
// Daftar Pengurus (Modul 2)
model BoardPosition {
  id              String    @id @default(uuid())
  jabatan         JabatanPengurus
  tanggalDiangkat DateTime  @map("tanggal_diangkat")
  tanggalBerhenti DateTime? @map("tanggal_berhenti") // Opsional, null jika masih aktif
  alasanBerhenti  String?   @map("alasan_berhenti") // Opsional

  // Relasi ke Anggota (Member)
  member   Member @relation(fields: [memberId], references: [id]) 
  memberId String @map("member_id")

  fingerprintUrl String? @map("fingerprint_url")
  signatureUrl   String? @map("signature_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("board_positions")
}

// Daftar Pengawas (Modul 3)
model SupervisoryPosition {
  id              String    @id @default(uuid())
  jabatan         String
  tanggalDiangkat DateTime  @map("tanggal_diangkat")
  tanggalBerhenti DateTime? @map("tanggal_berhenti")
  alasanBerhenti  String?   @map("alasan_berhenti")

  // Relasi ke Anggota (Member)
  member   Member @relation(fields: [memberId], references: [id]) 
  memberId String @map("member_id")

  // Opsional: Jika ingin menyimpan URL scan/foto
  fingerprintUrl String? @map("fingerprint_url")
  signatureUrl   String? @map("signature_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("supervisory_positions")
}

// Tambahkan enum baru untuk Jenis Simpanan dan Tipe Transaksi
enum JenisSimpanan {
  POKOK
  WAJIB
  SUKARELA
}

enum TipeTransaksiSimpanan {
  SETORAN
  PENARIKAN
}

// Daftar Simpanan Anggota (Modul 4)
model SimpananTransaksi {
  id         String                @id @default(uuid())
  tanggal    DateTime              @default(now())
  nomorBukti String?               @map("nomor_bukti")
  uraian     String
  jenis      JenisSimpanan
  tipe       TipeTransaksiSimpanan
  jumlah     Float

  member   Member @relation(fields: [memberId], references: [id]) 
  memberId String @map("member_id")

  dicatatOleh User?   @relation(fields: [userId], references: [id]) 
  userId      String? @map("user_id") // ID Pengurus

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("simpanan_transaksi")
}

model SimpananSaldo {
  id            String @id @default(uuid())
  saldoPokok    Float  @default(0) @map("saldo_pokok")
  saldoWajib    Float  @default(0) @map("saldo_wajib")
  saldoSukarela Float  @default(0) @map("saldo_sukarela")

  member   Member @relation(fields: [memberId], references: [id]) 
  memberId String @unique @map("member_id") // Setiap anggota hanya punya 1 record saldo

  lastUpdatedAt DateTime @updatedAt @map("last_updated_at")

  @@map("simpanan_saldo")
}

// Daftar Pinjaman Anggota (Modul 5)
model Loan {
  id         String @id @default(uuid())
  loanNumber String @unique @map("loan_number") // Nomor unik pinjaman
  memberId   String @map("member_id") // ID Anggota yang meminjam
  member     Member @relation(fields: [memberId], references: [id])

  loanAmount      Float    @map("loan_amount") // Jumlah uang pinjaman
  interestRate    Float    @map("interest_rate") // Suku bunga per periode (misal per bulan)
  loanDate        DateTime @map("loan_date") // Tanggal pinjaman diberikan
  termMonths      Int      @map("term_months") // Jangka waktu dalam bulan
  dueDate         DateTime @map("due_date") // Tanggal jatuh tempo keseluruhan
  purpose         String?  @map("purpose") // Alasan/tujuan meminjam (opsional)
  agreementNumber String?  @map("agreement_number") // Nomor perjanjian (opsional)

  status      String    @default("ACTIVE") // Misal: ACTIVE, PAID_OFF, OVERDUE
  paidOffDate DateTime? @map("paid_off_date") // Tanggal lunas (jika sudah)

  installments LoanInstallment[] // Relasi ke detail angsuran

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("loans")
}

// Detail Angsuran Pinjaman
model LoanInstallment {
  id     String @id @default(uuid())
  loanId String @map("loan_id")
  loan   Loan   @relation(fields: [loanId], references: [id]) 

  installmentNumber Int       @map("installment_number") // Angsuran ke-berapa
  dueDate           DateTime  @map("due_date") // Tanggal jatuh tempo angsuran ini
  paymentDate       DateTime? @map("payment_date") // Tanggal pembayaran angsuran ini (jika sudah)

  principalAmount Float  @map("principal_amount") // Jumlah pokok angsuran
  interestAmount  Float  @map("interest_amount") // Jumlah bunga angsuran
  totalAmount     Float  @map("total_amount") // Total bayar angsuran (pokok + bunga)
  amountPaid      Float? @map("amount_paid") // Jumlah yang dibayarkan (jika sudah)

  status String @default("PENDING") // Misal: PENDING, PAID, OVERDUE

  notes String? // Catatan tambahan (opsional)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("loan_installments")
}

// Daftar Inventaris (Modul 6)
enum InventoryCondition {
  BAIK
  PERLU_PERBAIKAN
  RUSAK
}

model InventoryItem {
  id                String   @id @default(uuid())
  itemCode          String   @unique @map("item_code")
  itemName          String   @map("item_name")
  purchaseDate      DateTime @map("purchase_date")
  quantity          Int
  unitPrice         Float    @map("unit_price")
  totalValue        Float    @map("total_value")
  technicalLifeSpan Int?     @map("technical_life_span")
  economicLifeSpan  Int?     @map("economic_life_span")

  condition InventoryCondition @default(BAIK)

  location String?
  notes    String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("inventory_items")
}

// Notulen Rapat Anggota (Modul 7)
model MemberMeetingNote {
  id                String   @id @default(uuid())
  meetingDate       DateTime @map("meeting_date")
  location          String
  meetingType       String   @map("meeting_type")
  totalMembers      Int      @map("total_members")
  membersPresent    Int      @map("members_present")
  leader            String
  attendees         String?
  agendaAndDecision String   @map("agenda_and_decision") @db.Text

  // Kita bisa tambahkan URL file jika ada, atau biarkan kosong jika hanya catatan teks
  documentUrl String? @map("document_url")

  notulis String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("member_meeting_notes")
}

// Notulen Rapat Pengurus (Modul 8)
model BoardMeetingNote {
  id                String   @id @default(uuid())
  meetingDate       DateTime @map("meeting_date")
  location          String
  meetingType       String   @map("meeting_type")
  totalBoard        Int      @map("total_board")
  boardPresent      Int      @map("board_present")
  leader            String
  attendees         String?
  agendaAndDecision String   @map("agenda_and_decision") @db.Text
  signatureUrl      String?  @map("signature_url")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("board_meeting_notes")
 
}

// Notulen Rapat Pengawas (Modul 9)
model SupervisoryMeetingNote {
  id                 String   @id @default(uuid())
  meetingDate        DateTime @map("meeting_date")
  location           String
  meetingType        String   @map("meeting_type")
  totalSupervisory   Int      @map("total_supervisory")
  supervisoryPresent Int      @map("supervisory_present")
  leader             String
  attendees          String?
  agendaAndDecision  String   @map("agenda_and_decision") @db.Text
  signatureUrl       String?  @map("signature_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("supervisory_meeting_notes")
}

// Daftar Karyawan (Modul 10)
model Employee {
  id             String   @id @default(uuid())
  employeeNumber Int      @default(autoincrement()) @map("employee_number")
  fullName       String   @map("full_name")
  placeOfBirth   String   @map("place_of_birth")
  dateOfBirth    DateTime @map("date_of_birth")
  gender         Gender
  address        String
  hireDate       DateTime @map("hire_date")
  position       String
  notes          String?

  signatureUrl String? @map("signature_url")

  approvedByPengurus   User?   @relation("EmployeePengurusApprovals", fields: [approvedByPengurusId], references: [id])
  approvedByPengurusId String? @map("approved_by_pengurus_id")

  approvedByKetua   User?     @relation("EmployeeKetuaApprovals", fields: [approvedByKetuaId], references: [id])
  approvedByKetuaId String?   @map("approved_by_ketua_id")
  ketuaApprovalDate DateTime? @map("ketua_approval_date")

  terminationDate   DateTime? @map("termination_date")
  terminationReason String?   @map("termination_reason")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("employees")
}

// Buku Tamu (Modul 11)
model GuestBook {
  id          String   @id @default(uuid())
  entryNumber Int      @default(autoincrement()) @map("entry_number")
  date        DateTime @default(now()) @map("date")              
  guestName   String   @map("guest_name")                           
  origin      String   @map("origin")                              
  meetWith    String?  @map("meet_with")                             
  purpose     String   @map("purpose")                               
  signatureUrl String? @map("signature_url")                       

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("guest_books")
}

// Buku Saran (Modul 12)
model MemberSuggestion {
  id                String   @id @default(uuid())
  suggestionNumber  Int      @default(autoincrement()) @map("suggestion_number") 
  date              DateTime @default(now()) @map("date")                
  

  member            Member   @relation(fields: [memberId], references: [id])
  memberId          String   @map("member_id")

  suggestion        String   @map("suggestion") @db.Text                   
  signatureUrl      String?  @map("signature_url")                         

  response          String?  @map("response") @db.Text                      
  responseByUser    User?    @relation(fields: [responseByUserId], references: [id])
  responseByUserId  String?  @map("response_by_user_id")
  responseAt        DateTime? @map("response_at")

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("member_suggestions")
}

// Saran Pengawas (Modul 13)
model SupervisorySuggestion {
  id                String   @id @default(uuid())
  suggestionNumber  Int      @default(autoincrement()) @map("suggestion_number") // Kolom 1: NO URUT
  date              DateTime @default(now()) @map("date")                 // Kolom 2: TANGGAL
  
  // Kolom 3 & 5 (Nama & TTD Pengawas) - Relasi ke Member
  supervisorMember   Member   @relation("SupervisorSuggestions", fields: [supervisorMemberId], references: [id])
  supervisorMemberId String   @map("supervisor_member_id")

  suggestion        String   @map("suggestion") @db.Text                   // Kolom 4: ISI SARAN
  supervisorSignatureUrl String? @map("supervisor_signature_url")            // Kolom 5: TANDA TANGAN PENGAWAS (Opsional)

  // Kolom 6 & 7 (Tanggapan & TTD Pengurus) - Relasi ke User
  response          String?  @map("response") @db.Text                      // Kolom 7: TANGGAPAN PENGURUS
  responseByUser    User?    @relation("SupervisorResponses", fields: [responseByUserId], references: [id]) // Kolom 6
  responseByUserId  String?  @map("response_by_user_id")
  responseAt        DateTime? @map("response_at")

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("supervisory_suggestions")
}

// Buku Anjuran Pejabat (Modul 14)
model OfficialRecommendation {
  id                String   @id @default(uuid())
  entryNumber       Int      @default(autoincrement()) @map("entry_number") // Kolom 1: NO URUT
  date              DateTime @default(now()) @map("date")                 // Kolom 2: TANGGAL
  officialName      String   @map("official_name")                        // Kolom 3: NAMA
  officialPositionAndAddress String @map("official_position_and_address") // Kolom 4: JABATAN DAN ALAMAT
  recommendation    String   @map("recommendation") @db.Text            // Kolom 5: ISI ANJURAN
  officialSignatureUrl String? @map("official_signature_url")             // Kolom 6: TANDA TANGAN (Pejabat)

  // Kolom 7 & 8: Tanggapan Pengurus
  response          String?  @map("response") @db.Text                      // Kolom 7: TANGGAPAN PENGURUS
  responseByUser    User?    @relation("OfficialRecommendationResponses", fields: [responseByUserId], references: [id]) // Kolom 8: TANDA TANGAN PENGURUS
  responseByUserId  String?  @map("response_by_user_id")
  responseAt        DateTime? @map("response_at")

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("official_recommendations")
}

// Buku Catatan Kejadia Penting (Modul 15)
model ImportantEvent {
  id                String   @id @default(uuid())
  entryNumber       Int      @default(autoincrement()) @map("entry_number") // Kolom 1: NO URUT
  date              DateTime @default(now()) @map("date")                 // Kolom 2: TANGGAL
  description       String   @map("description") @db.Text                  // Kolom 3: URAIAN KEJADIAN
  resolution        String?  @map("resolution") @db.Text                   // Kolom 4: PENYELESAIAN (Opsional)
  causeAndNotes     String?  @map("cause_and_notes") @db.Text            // Kolom 5: SEBAB & KETERANGAN (Opsional)

  // Kolom 6: TANDA TANGAN (Pengurus yang mencatat/update)
  recordedByUser    User?    @relation("ImportantEventsRecorded", fields: [recordedByUserId], references: [id])
  recordedByUserId  String?  @map("recorded_by_user_id")

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("important_events")
}

// Agenda (Modul 16)
model AgendaExpedition {
  id           String   @id @default(uuid())
  entryNumber  Int      @default(autoincrement()) @map("entry_number") 
  letterNumber String   @map("letter_number")                       
  letterDate   DateTime @map("letter_date")                           
  addressedTo  String   @map("addressed_to")                        
  subject      String   @map("subject")                               
  notes        String?  @map("notes")                             
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("agenda_expeditions")
}

//profile koperasi
model CooperativeProfile {
  id           String    @id @default(uuid()) // Kita gunakan uuid() agar konsisten
  displayName  String    @map("display_name")
  logoUrl      String?   @map("logo_url")
  phone        String?
  email        String?
  website      String?
  address      String?
  description  String?
  operatingHours String?  @map("operating_hours")
  mapCoordinates String?  @map("map_coordinates")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at") // Otomatis update timestamp

  @@map("cooperative_profile")
}
// Contact message
model ContactMessage {
  id          String   @id @default(uuid())
  senderName  String   @map("sender_name")
  senderEmail String   @map("sender_email")
  subject     String
  message     String
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("contact_messages")
}
// =========================
// Manajemen katalog website
//==========================

//1. Berita
enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
model Article {
  id          String         @id @default(uuid())
  title       String
  slug        String         @unique // Slug unik untuk URL
  content     String         @db.Text // Gunakan tipe Text untuk konten panjang
  excerpt     String?        // Ringkasan (opsional)
  imageUrl    String?        @map("image_url") // URL Gambar Unggulan (opsional)
  sourceLink  String?        @map("source_link") // Link Sumber Berita (opsional)
  status      ArticleStatus  @default(DRAFT) // Status default saat dibuat
  publishedAt DateTime?      @map("published_at") // Kapan dipublikasikan
  authorId    String         @map("author_id") // ID User Pengurus
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  author      User           @relation(fields: [authorId], references: [id])

  @@map("articles") // Nama tabel di database
}

// catalog product
model ProductCategory {
  id        String    @id @default(uuid())
  name      String    @unique 
  slug      String    @unique 
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  products  Product[]

  @@map("product_categories")
}

model Product {
  id           String    @id @default(uuid())
  name         String
  slug         String    @unique 
  description  String?   @db.Text
  price        Int
  unit         String?   
  sku          String?   @unique
  imageUrl     String?   @map("image_url")
  isAvailable  Boolean   @default(true) @map("is_available") 
  categoryId   String    @map("category_id") 
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  category     ProductCategory @relation(fields: [categoryId], references: [id])

  @@map("products")
}

// Galeri
model GalleryItem {
  id          String    @id @default(uuid())
  imageUrl    String    @map("image_url") 
  description String?   @db.Text 
  order       Int?      
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("gallery_items")
}